% Journals

% First the Full Name is given, then the abbreviation used in the AMS Math
% Reviews, with an indication if it could not be found there.
% Note the 2nd overwrites the 1st, so swap them if you want the full name.

 %{AMS}
 @String{AMSTrans = "American Mathematical Society Translations" }
 @String{AMSTrans = "Amer. Math. Soc. Transl." }
 @String{BullAMS = "Bulletin of the American Mathematical Society" }
 @String{BullAMS = "Bull. Amer. Math. Soc." }
 @String{ProcAMS = "Proceedings of the American Mathematical Society" }
 @String{ProcAMS = "Proc. Amer. Math. Soc." }
 @String{TransAMS = "Transactions of the American Mathematical Society" }
 @String{TransAMS = "Trans. Amer. Math. Soc." }

 %ACM
 @String{CACM = "Communications of the {ACM}" }
 @String{CACM = "Commun. {ACM}" }
 @String{CompServ = "Comput. Surveys" }
 @String{JACM = "J. ACM" }
 @String{ACMMathSoft = "{ACM} Transactions on Mathematical Software" }
 @String{ACMMathSoft = "{ACM} Trans. Math. Software" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newsletter" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newslett." }

 @String{AmerSocio = "American Journal of Sociology" }
 @String{AmerStatAssoc = "Journal of the American Statistical Association" }
 @String{AmerStatAssoc = "J. Amer. Statist. Assoc." }
 @String{ApplMathComp = "Applied Mathematics and Computation" }
 @String{ApplMathComp = "Appl. Math. Comput." }
 @String{AmerMathMonthly = "American Mathematical Monthly" }
 @String{AmerMathMonthly = "Amer. Math. Monthly" }
 @String{BIT = "{BIT}" }
 @String{BritStatPsych = "British Journal of Mathematical and Statistical
          Psychology" }
 @String{BritStatPsych = "Brit. J. Math. Statist. Psych." }
 @String{CanMathBull = "Canadian Mathematical Bulletin" }
 @String{CanMathBull = "Canad. Math. Bull." }
 @String{CompApplMath = "Journal of Computational and Applied Mathematics" }
 @String{CompApplMath = "J. Comput. Appl. Math." }
 @String{CompPhys = "Journal of Computational Physics" }
 @String{CompPhys = "J. Comput. Phys." }
 @String{CompStruct = "Computers and Structures" }
 @String{CompStruct = "Comput. \& Structures" }
 @String{CompJour = "The Computer Journal" }
 @String{CompJour = "Comput. J." }
 @String{CompSysSci = "Journal of Computer and System Sciences" }
 @String{CompSysSci = "J. Comput. System Sci." }
 @String{Computing = "Computing" }
 @String{ContempMath = "Contemporary Mathematics" }
 @String{ContempMath = "Contemp. Math." }
 @String{Crelle = "Crelle's Journal" }
 @String{GiornaleMath = "Giornale di Mathematiche" }
 @String{GiornaleMath = "Giorn. Mat." } % didn't find in AMS MR., ibid.

 %IEEE
 @String{Computer = "{IEEE} Computer" }
 @String{IEEETransComp = "{IEEE} Transactions on Computers" }
 @String{IEEETransComp = "{IEEE} Trans. Comput." }
 @String{IEEETransAC = "{IEEE} Transactions on Automatic Control" }
 @String{IEEETransAC = "{IEEE} Trans. Automat. Control" }
 @String{IEEESpec = "{IEEE} Spectrum" } % didn't find in AMS MR
 @String{ProcIEEE = "Proceedings of the {IEEE}" }
 @String{ProcIEEE = "Proc. {IEEE}" } % didn't find in AMS MR
 @String{IEEETransAeroElec = "{IEEE} Transactions on Aerospace and Electronic
     Systems" }
 @String{IEEETransAeroElec = "{IEEE} Trans. Aerospace Electron. Systems" }

 @String{IMANumerAna = "{IMA} Journal of Numerical Analysis" }
 @String{IMANumerAna = "{IMA} J. Numer. Anal." }
 @String{InfProcLet = "Information Processing Letters" }
 @String{InfProcLet = "Inform. Process. Lett." }
 @String{InstMathApp = "Journal of the Institute of Mathematics and
     its Applications" }
 @String{InstMathApp = "J. Inst. Math. Appl." }
 @String{IntControl = "International Journal of Control" }
 @String{IntControl = "Internat. J. Control" }
 @String{IntNumerEng = "International Journal for Numerical Methods in
     Engineering" }
 @String{IntNumerEng = "Internat. J. Numer. Methods Engrg." }
 @String{IntSuper = "International Journal of Supercomputing Applications" }
 @String{IntSuper = "Internat. J. Supercomputing Applic." } % didn't find
%% in AMS MR
 @String{Kibernetika = "Kibernetika" }
 @String{JResNatBurStand = "Journal of Research of the National Bureau
     of Standards" }
 @String{JResNatBurStand = "J. Res. Nat. Bur. Standards" }
 @String{LinAlgApp = "Linear Algebra and its Applications" }
 @String{LinAlgApp = "Linear Algebra Appl." }
 @String{MathAnaAppl = "Journal of Mathematical Analysis and Applications" }
 @String{MathAnaAppl = "J. Math. Anal. Appl." }
 @String{MathAnnalen = "Mathematische Annalen" }
 @String{MathAnnalen = "Math. Ann." }
 @String{MathPhys = "Journal of Mathematical Physics" }
 @String{MathPhys = "J. Math. Phys." }
 @String{MathComp = "Mathematics of Computation" }
 @String{MathComp = "Math. Comp." }
 @String{MathScand = "Mathematica Scandinavica" }
 @String{MathScand = "Math. Scand." }
 @String{TablesAidsComp = "Mathematical Tables and Other Aids to Computation" }
 @String{TablesAidsComp = "Math. Tables Aids Comput." }
 @String{NumerMath = "Numerische Mathematik" }
 @String{NumerMath = "Numer. Math." }
 @String{PacificMath = "Pacific Journal of Mathematics" }
 @String{PacificMath = "Pacific J. Math." }
 @String{ParDistComp = "Journal of Parallel and Distributed Computing" }
 @String{ParDistComp = "J. Parallel and Distrib. Comput." } % didn't find
%% in AMS MR
 @String{ParComputing = "Parallel Computing" }
 @String{ParComputing = "Parallel Comput." }
 @String{PhilMag = "Philosophical Magazine" }
 @String{PhilMag = "Philos. Mag." }
 @String{ProcNAS = "Proceedings of the National Academy of Sciences
                    of the USA" }
 @String{ProcNAS = "Proc. Nat. Acad. Sci. U. S. A." }
 @String{Psychometrika = "Psychometrika" }
 @String{QuartMath = "Quarterly Journal of Mathematics, Oxford, Series (2)" }
 @String{QuartMath = "Quart. J. Math. Oxford Ser. (2)" }
 @String{QuartApplMath = "Quarterly of Applied Mathematics" }
 @String{QuartApplMath = "Quart. Appl. Math." }
 @String{RevueInstStat = "Review of the International Statisical Institute" }
 @String{RevueInstStat = "Rev. Inst. Internat. Statist." }

 %SIAM
 @String{JSIAM = "Journal of the Society for Industrial and Applied
     Mathematics" }
 @String{JSIAM = "J. Soc. Indust. Appl. Math." }
 @String{JSIAMB = "Journal of the Society for Industrial and Applied
     Mathematics, Series B, Numerical Analysis" }
 @String{JSIAMB = "J. Soc. Indust. Appl. Math. Ser. B Numer. Anal." }
 @String{SIAMAlgMeth = "{SIAM} Journal on Algebraic and Discrete Methods" }
 @String{SIAMAlgMeth = "{SIAM} J. Algebraic Discrete Methods" }
 @String{SIAMAppMath = "{SIAM} Journal on Applied Mathematics" }
 @String{SIAMAppMath = "{SIAM} J. Appl. Math." }
 @String{SIAMComp = "{SIAM} Journal on Computing" }
 @String{SIAMComp = "{SIAM} J. Comput." }
 @String{SIAMMatrix = "{SIAM} Journal on Matrix Analysis and Applications" }
 @String{SIAMMatrix = "{SIAM} J. Matrix Anal. Appl." }
 @String{SIAMNumAnal = "{SIAM} Journal on Numerical Analysis" }
 @String{SIAMNumAnal = "{SIAM} J. Numer. Anal." }
 @String{SIAMReview = "{SIAM} Review" }
 @String{SIAMReview = "{SIAM} Rev." }
 @String{SIAMSciStat = "{SIAM} Journal on Scientific and Statistical
     Computing" }
 @String{SIAMSciStat = "{SIAM} J. Sci. Statist. Comput." }

 @String{SoftPracExp = "Software Practice and Experience" }
 @String{SoftPracExp = "Software Prac. Experience" } % didn't find in AMS MR
 @String{StatScience = "Statistical Science" }
 @String{StatScience = "Statist. Sci." }
 @String{Techno = "Technometrics" }
 @String{USSRCompMathPhys = "{USSR} Computational Mathematics and Mathematical
     Physics" }
 @String{USSRCompMathPhys = "{U. S. S. R.} Comput. Math. and Math. Phys." }
 @String{VLSICompSys = "Journal of {VLSI} and Computer Systems" }
 @String{VLSICompSys = "J. {VLSI} Comput. Syst." }
 @String{ZAngewMathMech = "Zeitschrift fur Angewandte Mathematik und
     Mechanik" }
 @String{ZAngewMathMech = "Z. Angew. Math. Mech." }
 @String{ZAngewMathPhys = "Zeitschrift fur Angewandte Mathematik und Physik" }
 @String{ZAngewMathPhys = "Z. Angew. Math. Phys." }

% Publishers % ================================================= |

 @String{Academic = "Academic Press" }
 @String{ACMPress = "{ACM} Press" }
 @String{AdamHilger = "Adam Hilger" }
 @String{AddisonWesley = "Addison-Wesley" }
 @String{AllynBacon = "Allyn and Bacon" }
 @String{AMS = "American Mathematical Society" }
 @String{Birkhauser = "Birkha{\"u}ser" }
 @String{CambridgePress = "Cambridge University Press" }
 @String{Chelsea = "Chelsea" }
 @String{ClaredonPress = "Claredon Press" }
 @String{DoverPub = "Dover Publications" }
 @String{Eyolles = "Eyolles" }
 @String{HoltRinehartWinston = "Holt, Rinehart and Winston" }
 @String{Interscience = "Interscience" }
 @String{JohnsHopkinsPress = "The Johns Hopkins University Press" }
 @String{JohnWileySons = "John Wiley and Sons" }
 @String{Macmillan = "Macmillan" }
 @String{MathWorks = "The Math Works Inc." }
 @String{McGrawHill = "McGraw-Hill" }
 @String{NatBurStd = "National Bureau of Standards" }
 @String{NorthHolland = "North-Holland" }
 @String{OxfordPress = "Oxford University Press" }  %address Oxford or London?
 @String{PergamonPress = "Pergamon Press" }
 @String{PlenumPress = "Plenum Press" }
 @String{PrenticeHall = "Prentice-Hall" }
 @String{SIAMPub = "{SIAM} Publications" }
 @String{Springer = "Springer-Verlag" }
 @String{TexasPress = "University of Texas Press" }
 @String{VanNostrand = "Van Nostrand" }
 @String{WHFreeman = "W. H. Freeman and Co." }

%Entries

@article{Astrahan1975,
    author = {Astrahan, M. M. and Chamberlin, D. D.},
    title = {Implementation of a Structured English Query Language},
    year = {1975},
    issue_date = {Oct. 1975},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {18},
    number = {10},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/361020.361215},
    doi = {10.1145/361020.361215},
    abstract = {The relational model of data, the XRM Relational Memory System, and the SEQUEL language
    have been covered in previous papers and are reviewed. SEQUEL is a relational data
    sublanguage intended for ad hoc interactive problem solving by non-computer specialists.
    A version of SEQUEL that has been implemented in a prototype interpreter is described.
    The interpreter is designed to minimize the data accessing operations required to
    respond to an arbitrary query. The optimization algorithms designed for this purpose
    are described.},
    journal = {Commun. ACM},
    month = oct,
    pages = {580–588},
    numpages = {9},
    keywords = {data structure, query language, database, data organization, relational model, nonprocedural language}
}

@article{Astrahan1976,
    author = {Astrahan, M. M. and Blasgen, M. W. and Chamberlin, D. D. and Eswaran, K. P. and Gray, J. N. and Griffiths, P. P. and King, W. F. and Lorie, R. A. and McJones, P. R. and Mehl, J. W. and Putzolu, G. R. and Traiger, I. L. and Wade, B. W. and Watson, V.},
    title = {System R: Relational Approach to Database Management},
    year = {1976},
    issue_date = {June 1976},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {1},
    number = {2},
    issn = {0362-5915},
    url = {https://doi.org/10.1145/320455.320457},
    doi = {10.1145/320455.320457},
    abstract = {System R is a database management system which provides a high level relational data
    interface. The systems provides a high level of data independence by isolating the
    end user as much as possible from underlying storage structures. The system permits
    definition of a variety of relational views on common underlying data. Data control
    features are provided, including authorization, integrity assertions, triggered transactions,
    a logging and recovery subsystem, and facilities for maintaining data consistency
    in a shared-update environment.This paper contains a description of the overall architecture
    and design of the system. At the present time the system is being implemented and
    the design evaluated. We emphasize that System R is a vehicle for research in database
    architecture, and is not planned as a product.},
    journal = {ACM Trans. Database Syst.},
    month = jun,
    pages = {97–137},
    numpages = {41},
    keywords = {recovery, nonprocedural language, index structures, locking, database, data structures, authorization, relational model}
}

@inproceedings{Chamberlin1974,
    author = {Chamberlin, Donald D. and Boyce, Raymond F.},
    title = {SEQUEL: A Structured English Query Language},
    year = {1974},
    isbn = {9781450374156},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/800296.811515},
    doi = {10.1145/800296.811515},
    abstract = {In this paper we present the data manipulation facility for a structured English query
    language (SEQUEL) which can be used for accessing data in an integrated relational
    data base. Without resorting to the concepts of bound variables and quantifiers SEQUEL
    identifies a set of simple operations on tabular structures, which can be shown to
    be of equivalent power to the first order predicate calculus. A SEQUEL user is presented
    with a consistent set of keyword English templates which reflect how people use tables
    to obtain information. Moreover, the SEQUEL user is able to compose these basic templates
    in a structured manner in order to form more complex queries. SEQUEL is intended as
    a data base sublanguage for both the professional programmer and the more infrequent
    data base user.},
    booktitle = {Proceedings of the 1974 ACM SIGFIDET (Now SIGMOD) Workshop on Data Description, Access and Control},
    pages = {249–264},
    numpages = {16},
    keywords = {Information Retrieval, Data Manipulation Languages, Query Languages, Data Base Management Systems},
    location = {Ann Arbor, Michigan},
    series = {SIGFIDET '74}
}

@article{Chamberlin1976,
    author = {Chamberlin, D. D. and Astrahan, M. M. and Eswaran, K. P. and Griffiths, P. P. and Lorie, R. A. and Mehl, J. W. and Reisner, P. and Wade, B. W.},
    title = {SEQUEL 2: A Unified Approach to Data Definition, Manipulation, and Control},
    year = {1976},
    issue_date = {November 1976},
    publisher = {IBM Corp.},
    address = {USA},
    volume = {20},
    number = {6},
    issn = {0018-8646},
    url = {https://doi.org/10.1147/rd.206.0560},
    doi = {10.1147/rd.206.0560},
    abstract = {SEQUEL 2 is a relational data language that provides a consistent, English keyword-oriented
    set of facilities for query, data definition, data manipulation, and datac ontrol.
    SEQUEL 2 may be used either as a stand-alone interface for nonspecialists in data
    processing or as a data sublanguage embedded in a host programming language for use
    by application programmers and data base administrators. This paper describes SEQUEL
    2 and the means by which it is coupled to a host language.},
    journal = {IBM J. Res. Dev.},
    month = nov,
    pages = {560–575},
    numpages = {16}
}

@article{Date1984,
    author = {Date, C. J.},
    title = {A Critique of the SQL Database Language},
    year = {1984},
    issue_date = {November 1984},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {14},
    number = {3},
    issn = {0163-5808},
    url = {https://doi.org/10.1145/984549.984551},
    doi = {10.1145/984549.984551},
    abstract = {The ANS Database Committee (X3H2) is currently at work on a proposed standard relational
    database language (RDL), and has adopted as a basis for that activity a definition
    of the "structured query language" SQL from IBM [10]. Moreover, numerous hardware
    and software vendors (in addition to IBM) have already released or at least announced
    products that are based to a greater or lesser extent on the SQL language as defined
    by IBM. There can thus be little doubt that the importance of that language will increase
    significantly over the next few years. Yet the SQL language is very far from perfect.
    The purpose of this paper is to present a critical analysis of the language's major
    shortcomings, in the hope that it may be possible to remedy some of the deficiencies
    before their influence becomes too all-pervasive. The paper's standpoint is primarily
    that of formal computer languages in general, rather than that of database languages
    specifically.},
    journal = {SIGMOD Rec.},
    month = nov,
    pages = {8–54},
    numpages = {47}
}

@article{Kim2020,
   abstract = {Translating natural language to SQL (NL2SQL) has received extensive attention lately, especially with the recent success of deep learning technologies. However, despite the large number of studies, we do not have a thorough understanding of how good existing techniques really are and how much is applicable to real-world situations. A key difficulty is that different studies are based on different datasets, which often have their own limitations and assumptions that are implicitly hidden in the context or datasets. Moreover, a couple of evaluation metrics are commonly employed but they are rather simplistic and do not properly depict the accuracy of results, as will be shown in our experiments. To provide a holistic view of NL2SQL technologies and access current advancements, we perform extensive experiments under our unified framework using eleven of recent techniques over 10+ benchmarks including a new benchmark (WTQ) and TPC-H. We provide a comprehensive survey of recent NL2SQL methods, introducing a taxonomy of them. We reveal major assumptions of the methods and classify translation errors through extensive experiments. We also provide a practical tool for validation by using existing, mature database technologies such as query rewrite and database testing. We then suggest future research directions so that the translation can be used in practice.},
   author = {Hyeonji Kim and Byeong Hoon So and Wook Shin Han and Hongrae Lee},
   doi = {10.14778/3401960.3401970},
   issn = {21508097},
   issue = {10},
   journal = {Proceedings of the VLDB Endowment},
   month = {6},
   pages = {1737-1750},
   publisher = {VLDB Endowment},
   title = {Natural language to SQL: Where are we today?},
   volume = {13},
   year = {2020},
}
@inproceedings{Lyons2016,
   abstract = {Recent advances in automatic speech recognition and natural language processing have led to a new generation of robust voice-based interfaces. Yet, there is very little work on using voice-based interfaces to query database systems. In fact, one might even wonder who in her right mind would want to query a database system using voice commands! With this demonstration, we make the case for querying database systems using a voice-based interface, a new querying and interaction paradigm we call Query-by-Voice (QbV ). We will demonstrate the practicality and utility of QbV for relational DBMSs using a using a proof-of-concept system called EchoQuery. To achieve a smooth and intuitive interaction, the query interface of EchoQuery is inspired by casual human-to-human conversations. Our demo will show that voice-based interfaces present an intuitive means of querying and consuming data in a database. It will also highlight the unique advantages of QbV over the more traditional approaches, text-based or visual interfaces, for applications where context switching is too expensive, too risky or even not possible at all.},
   author = {Gabriel Lyons and Vinh Tran and Carsten Binnig and Ugur Cetintemel and Tim Kraska},
   doi = {10.1145/2882903.2899394},
   isbn = {9781450335317},
   issn = {07308078},
   journal = {Proceedings of the ACM SIGMOD International Conference on Management of Data},
   month = {6},
   pages = {2129-2132},
   publisher = {Association for Computing Machinery},
   title = {Making the case for query-by-voice with echoquery},
   volume = {26-June-2016},
   year = {2016},
}

@inproceedings{Obaido2019,
   abstract = {In the software industry, Structured Query Language (SQL) remains a highly sought-after skill required by most employers. SQL is widely adopted as the preferred declarative language to manipulate data in relational databases. However, the process of comprehending written and new queries turns out to be difficult, especially for novices. To address this problem, a plethora of tools have been developed to assist a novice understand queries using different approaches via visualisation and narration. This paper describes a SQL Narrator designed using a Context-free Grammar that reads and generates narrations for queries using predefined templates. The SQL Narrator is able to narrate nested queries cascaded with balanced parentheses. The generated narrations can be used in assisting students to comprehend nested SQL queries in learning environments. A survey conducted on 161 participants showed that 98.1% agreed that they were able to understand nested queries using our SQL Narrator.},
   author = {George Obaido and Abejide Ade-Ibijola and Hima Vadapalli},
   doi = {10.1109/ICTAS.2019.8703620},
   isbn = {9781538673652},
   journal = {2019 Conference on Information Communications Technology and Society, ICTAS 2019},
   keywords = {Comprehension aid for queries,Context-free grammar applications,Learning via narrations,SQL query narration},
   month = {4},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Generating narrations of nested SQL queries using context-free grammars},
   year = {2019},
}

@inproceedings{Parr2014,
    author = {Parr, Terence and Harwell, Sam and Fisher, Kathleen},
    title = {Adaptive LL(*) Parsing: The Power of Dynamic Analysis},
    year = {2014},
    isbn = {9781450325851},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2660193.2660202},
    doi = {10.1145/2660193.2660202},
    abstract = {Despite the advances made by modern parsing strategies such as PEG, LL(*), GLR, and GLL, parsing is not a solved problem. Existing approaches suffer from a number of weaknesses, including difficulties supporting side-effecting embedded actions, slow and/or unpredictable performance, and counter-intuitive matching strategies. This paper introduces the ALL(*) parsing strategy that combines the simplicity, efficiency, and predictability of conventional top-down LL(k) parsers with the power of a GLR-like mechanism to make parsing decisions. The critical innovation is to move grammar analysis to parse-time, which lets ALL(*) handle any non-left-recursive context-free grammar. ALL(*) is O(n4) in theory but consistently performs linearly on grammars used in practice, outperforming general strategies such as GLL and GLR by orders of magnitude. ANTLR 4 generates ALL(*) parsers and supports direct left-recursion through grammar rewriting. Widespread ANTLR 4 use (5000 downloads/month in 2013) provides evidence that ALL(*) is effective for a wide variety of applications.},
    booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
    pages = {579–598},
    numpages = {20},
    keywords = {grammar, peg, all(*), nondeterministic parsing, ll(*), augmented transition networks, gll, dfa, glr},
    location = {Portland, Oregon, USA},
    series = {OOPSLA '14}
}

@inproceedings{Reisner1975,
    author = {Reisner, Phyllis and Boyce, Raymond F. and Chamberlin, Donald D.},
    title = {Human Factors Evaluation of Two Data Base Query Languages: Square and Sequel},
    year = {1975},
    isbn = {9781450379199},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1499949.1500036},
    doi = {10.1145/1499949.1500036},
    abstract = {Boyce et al. have recently described two data base query languages, SQUARE and SEQUEL,
    which are intended for use in an interactive mode by both programmers and professional
    non-programmers (e.g., accountants, lawyers, managers). The languages are comparable
    in the sense that the basic operators, underlying data structures and intended use
    are the same. They differ primarily in syntactic form, with a few additional differences
    in some of the specific features. Both of the languages are intended to be easily
    learned and used by people without specialized computer training.},
    booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
    pages = {447–452},
    numpages = {6},
    location = {Anaheim, California},
    series = {AFIPS '75}
}

@ARTICLE{Reisner1977,
    author={Reisner, P.},
    journal={IEEE Transactions on Software Engineering}, 
    title={Use of Psychological Experimentation as an Aid to Development of a Query Language}, 
    year={1977},
    volume={SE-3},
    number={3},
    pages={218-229},
    abstract={This paper describes a series of psychological experiments used to test a new data base query language. The intent is to make psychological testing of a language part of the design and development process. By testing a language while it is still under development, features that require changing can bs identified and the changes made.},
    keywords={},
    doi={10.1109/TSE.1977.231131},
    ISSN={1939-3520},
    month={May}
}

@INPROCEEDINGS{Ruksana2021,
  author={A, Ruksana Banu. and Al Siyabi, Wedad Salim Ali and Al Minje, Yusra},
  booktitle={2021 International Conference on Software Engineering   Computer Systems and 4th International Conference on Computational Science and Information Management (ICSECS-ICOCSIM)}, 
  title={A Conceptual Review on Integration of Cognitive Load Theory and Human-Computer Interaction}, 
  year={2021},
  volume={},
  number={},
  pages={667-672},
  doi={10.1109/ICSECS52883.2021.00127}}


@report{Shah2020tr,
   abstract = "Speech-driven querying is becoming popular in new device environments such as smartphones, tablets, and even conversational assistants. However, such querying is largely restricted to natural language. Typed SQL remains the gold standard for sophisticated structured querying although it is painful in many environments, which restricts when and how users consume their data. In this work, we propose to bridge this gap by designing a speech-driven querying system and interface for structured data we call SpeakQL. We support a practically useful subset of regular SQL and allow users to query in any domain with novel touch/speech based human-in-the-loop correction mechanisms. Automatic speech recognition (ASR) introduces myriad forms of errors in transcriptions , presenting us with a technical challenge. We exploit our observations of SQL's properties, its grammar, and the queried database to build a modular architecture. We present the first dataset of spoken SQL queries and a generic approach to generate them for any arbitrary schema. Our experiments show that SpeakQL can automatically correct a large fraction of errors in ASR transcriptions. User studies show that SpeakQL can help users specify SQL queries significantly faster with a speedup of average 2.7x and up to 6.7x compared to typing on a tablet device. SpeakQL also reduces the user effort in specifying queries by a factor of average 10x and up to 60x compared to raw typing effort.",
   author = "Vraj Shah and Side Li and Arun Kumar and Lawrence Saul",
   title = "SpeakQL: Towards Speech-driven Multimodal Querying of Structured Data",
   year = "2020",
}
@article{Shah2020,
   abstract = {Speech-driven querying is becoming popular in new device environments such as smartphones, tablets, and even conversational assistants. However, such querying is largely restricted to natural language. Typed SQL remains the gold standard for sophisticated structured querying although it is painful in many environments, which restricts when and how users consume their data. In this work, we propose to bridge this gap by designing a speech-driven querying system and interface for structured data we call SpeakQL. We support a practically useful subset of regular SQL and allow users to query in any domain with novel touch/speech based human-in-the-loop correction mechanisms. Automatic speech recognition (ASR) introduces myriad forms of errors in transcriptions, presenting us with a technical challenge. We exploit our observations of SQL's properties, its grammar, and the queried database to build a modular architecture. We present the first dataset of spoken SQL queries and a generic approach to generate them for any arbitrary schema. Our experiments show that SpeakQL can automatically correct a large fraction of errors in ASR transcriptions. User studies show that SpeakQL can help users specify SQL queries significantly faster with a speedup of average 2.7x and up to 6.7x compared to typing on a tablet device. SpeakQL also reduces the user effort in specifying queries by a factor of average 10x and up to 60x compared to raw typing effort.},
   author = {Vraj Shah and Side Li and Arun Kumar and Lawrence Saul},
   doi = {10.1145/3318464.3389777},
   isbn = {9781450367356},
   issn = {07308078},
   journal = {Proceedings of the ACM SIGMOD International Conference on Management of Data},
   keywords = {SQL,multimodal,speech-driven},
   note = {School: UCSD},
   pages = {2363-2374},
   title = {SpeakQL: Towards Speech-driven Multimodal Querying of Structured Data},
   year = {2020},
}

@inproceedings{Thomas1975,
    author = {Thomas, John C. and Gould, John D.},
    title = {A Psychological Study of Query by Example},
    year = {1975},
    isbn = {9781450379199},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1499949.1500035},
    doi = {10.1145/1499949.1500035},
    abstract = {Many different query systems have been proposed. One way to partition extant and hypothetical
    query systems is on the basis of how English-like they are. One approach for an easy-to-use
    query system is to allow the user to state a question in natural English. The system
    may then disambiguate the possible interpretations of this question on the basis of
    context or on the basis of feedback questions to the user. A second approach is to
    require the user to state his question in a formal language system, but one that uses
    an English-like grammar and vocabulary. IBM's Interactive Query Facility (IQF) and
    SEQUEL exemplify this type of approach. A third approach is to require the user to
    state his question in a formal language system that does not attempt to appear "English-like."
    Zloof's Query By Example language is best described by this third approach. In this
    paper we demonstrate experimentally the ease and accuracy with which nonprogrammers
    learned and used this powerful Query By Example language.},
    booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
    pages = {439–445},
    numpages = {7},
    location = {Anaheim, California},
    series = {AFIPS '75}
}


@article{Towse1995,
   abstract = {This paper considers working memory capacity, critically examining the hypothesis that 
   counting span (the ability to count arrays of objects and store count totals) reflects a trade-off 
   in resources available for processing and short-term storage. Previous evidence interpreted as favouring 
   this hypothesis has confounded task difficulty with counting time. Experiment 1 validated a manipulation 
   of the attentional demands of counting in which target objects were differentiated from non-targets by 
   either a single feature (colour) or a feature conjunction (a combination of line orientations). 
   The results confirmed that the two presentations involved qualitatively different attentional loads. 
   Experiment 2 used these displays to compare counting span for children aged 6 to 11, both with and 
   without an adjustment of target numerosity to control for differences in processing time. At all ages,
   span was lower when counting took longer, but there was no difference between feature and conjunction 
   arrays once counting time was accounted for. These results argue against a resource trade-off 
   interpretation of counting span. Rather, they support a hypothesis of resource-switching among children, 
   implying that counting span acts as a measure of time-based forgetting. 
   © 1995, Taylor & Francis Group, LLC. All rights reserved.},
   author = {J. N. Towse and G. J. Hitch},
   doi = {10.1080/14640749508401379},
   issn = {14640740},
   issue = {1},
   journal = {The Quarterly Journal of Experimental Psychology Section A},
   month = {2},
   pages = {108-124},
   pmid = {7754077},
   title = {Is there a Relationship between Task Demand and Storage Space in Tests of Working Memory Capacity?},
   volume = {48},
   year = {1995},
}

@article{Vandierendonck1997,
author = { Andre Vandierendonck Gino De   Vooght },
title = {Working Memory Constraints on Linear Reasoning with Spatial and Temporal Contents},
journal = {The Quarterly Journal of Experimental Psychology Section A},
volume = {50},
number = {4},
pages = {803-820},
year  = {1997},
publisher = {Routledge},
doi = {10.1080/713755735},
    note ={PMID: 9450380},

URL = { 
        https://doi.org/10.1080/713755735
    
},
eprint = { 
        https://doi.org/10.1080/713755735
    
}

}

@book{10.5555/2501707,
author = {MacKenzie, I. Scott},
title = {Human-Computer Interaction: An Empirical Research Perspective},
year = {2013},
isbn = {0124058655},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
edition = {1st},
abstract = {Human-Computer Interaction: An Empirical Research Perspective is the definitive guide to empirical research in HCI. The book begins with foundational topics including historical context, the human factor, interaction elements, and the fundamentals of science and research. From there, you'll progress to learning about the methods for conducting an experiment to evaluate a new computer interface or interaction technique. There are detailed discussions and how-to analyses on models of interaction, focusing on descriptive models and predictive models. Writing and publishing a research paper is explored with helpful tips for success. Throughout the book, you'll find hands-on exercises, checklists, and real-world examples. This is your must-have, comprehensive guide to empirical and experimental research in HCI-an essential addition to your HCI library. Master empirical and experimental research with this comprehensive, A-to-Z guide in a concise, hands-on reference Discover the practical and theoretical ins-and-outs of user studies Find exercises, takeaway points, and case studies throughout}
}

% Statistics packages and other software used:

@inproceedings{seabold2010statsmodels,
  title={statsmodels: Econometric and statistical modeling with python},
  author={Seabold, Skipper and Perktold, Josef},
  booktitle={9th Python in Science Conference},
  year={2010},
}

@misc{kelechava_2020, 
title={The SQL standard - ISO/IEC 9075:2016 (ANSI X3.135)}, 
url={https://blog.ansi.org/2018/10/sql-standard-iso-iec-9075-2016-ansi-x3-135/#gref}, 
journal={The ANSI Blog}, 
author={Kelechava, Brad}, 
year={2020}, 
month={Jul}
} 


@misc{antlrgrammarsv4,
  title = {grammars-v4},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/antlr/grammars-v4}},
  commit = {6a084712f0875d3508cdeb2926a95b1e7b524400}
}

@book{DBLP:books/aw/AbiteboulHV95,
    author    = {Serge Abiteboul and
                Richard Hull and
                Victor Vianu},
    title     = {Foundations of Databases},
    publisher = {Addison-Wesley},
    year      = {1995},
    isbn      = {0-201-53771-0},
    bibsource = {DBLP, http://dblp.uni-trier.de},
    read={yes}
}