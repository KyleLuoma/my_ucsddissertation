% Journals

% First the Full Name is given, then the abbreviation used in the AMS Math
% Reviews, with an indication if it could not be found there.
% Note the 2nd overwrites the 1st, so swap them if you want the full name.

 %{AMS}
 @String{AMSTrans = "American Mathematical Society Translations" }
 @String{AMSTrans = "Amer. Math. Soc. Transl." }
 @String{BullAMS = "Bulletin of the American Mathematical Society" }
 @String{BullAMS = "Bull. Amer. Math. Soc." }
 @String{ProcAMS = "Proceedings of the American Mathematical Society" }
 @String{ProcAMS = "Proc. Amer. Math. Soc." }
 @String{TransAMS = "Transactions of the American Mathematical Society" }
 @String{TransAMS = "Trans. Amer. Math. Soc." }

 %ACM
 @String{CACM = "Communications of the {ACM}" }
 @String{CACM = "Commun. {ACM}" }
 @String{CompServ = "Comput. Surveys" }
 @String{JACM = "J. ACM" }
 @String{ACMMathSoft = "{ACM} Transactions on Mathematical Software" }
 @String{ACMMathSoft = "{ACM} Trans. Math. Software" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newsletter" }
 @String{SIGNUM = "{ACM} {SIGNUM} Newslett." }

 @String{AmerSocio = "American Journal of Sociology" }
 @String{AmerStatAssoc = "Journal of the American Statistical Association" }
 @String{AmerStatAssoc = "J. Amer. Statist. Assoc." }
 @String{ApplMathComp = "Applied Mathematics and Computation" }
 @String{ApplMathComp = "Appl. Math. Comput." }
 @String{AmerMathMonthly = "American Mathematical Monthly" }
 @String{AmerMathMonthly = "Amer. Math. Monthly" }
 @String{BIT = "{BIT}" }
 @String{BritStatPsych = "British Journal of Mathematical and Statistical
          Psychology" }
 @String{BritStatPsych = "Brit. J. Math. Statist. Psych." }
 @String{CanMathBull = "Canadian Mathematical Bulletin" }
 @String{CanMathBull = "Canad. Math. Bull." }
 @String{CompApplMath = "Journal of Computational and Applied Mathematics" }
 @String{CompApplMath = "J. Comput. Appl. Math." }
 @String{CompPhys = "Journal of Computational Physics" }
 @String{CompPhys = "J. Comput. Phys." }
 @String{CompStruct = "Computers and Structures" }
 @String{CompStruct = "Comput. \& Structures" }
 @String{CompJour = "The Computer Journal" }
 @String{CompJour = "Comput. J." }
 @String{CompSysSci = "Journal of Computer and System Sciences" }
 @String{CompSysSci = "J. Comput. System Sci." }
 @String{Computing = "Computing" }
 @String{ContempMath = "Contemporary Mathematics" }
 @String{ContempMath = "Contemp. Math." }
 @String{Crelle = "Crelle's Journal" }
 @String{GiornaleMath = "Giornale di Mathematiche" }
 @String{GiornaleMath = "Giorn. Mat." } % didn't find in AMS MR., ibid.

 %IEEE
 @String{Computer = "{IEEE} Computer" }
 @String{IEEETransComp = "{IEEE} Transactions on Computers" }
 @String{IEEETransComp = "{IEEE} Trans. Comput." }
 @String{IEEETransAC = "{IEEE} Transactions on Automatic Control" }
 @String{IEEETransAC = "{IEEE} Trans. Automat. Control" }
 @String{IEEESpec = "{IEEE} Spectrum" } % didn't find in AMS MR
 @String{ProcIEEE = "Proceedings of the {IEEE}" }
 @String{ProcIEEE = "Proc. {IEEE}" } % didn't find in AMS MR
 @String{IEEETransAeroElec = "{IEEE} Transactions on Aerospace and Electronic
     Systems" }
 @String{IEEETransAeroElec = "{IEEE} Trans. Aerospace Electron. Systems" }

 @String{IMANumerAna = "{IMA} Journal of Numerical Analysis" }
 @String{IMANumerAna = "{IMA} J. Numer. Anal." }
 @String{InfProcLet = "Information Processing Letters" }
 @String{InfProcLet = "Inform. Process. Lett." }
 @String{InstMathApp = "Journal of the Institute of Mathematics and
     its Applications" }
 @String{InstMathApp = "J. Inst. Math. Appl." }
 @String{IntControl = "International Journal of Control" }
 @String{IntControl = "Internat. J. Control" }
 @String{IntNumerEng = "International Journal for Numerical Methods in
     Engineering" }
 @String{IntNumerEng = "Internat. J. Numer. Methods Engrg." }
 @String{IntSuper = "International Journal of Supercomputing Applications" }
 @String{IntSuper = "Internat. J. Supercomputing Applic." } % didn't find
%% in AMS MR
 @String{Kibernetika = "Kibernetika" }
 @String{JResNatBurStand = "Journal of Research of the National Bureau
     of Standards" }
 @String{JResNatBurStand = "J. Res. Nat. Bur. Standards" }
 @String{LinAlgApp = "Linear Algebra and its Applications" }
 @String{LinAlgApp = "Linear Algebra Appl." }
 @String{MathAnaAppl = "Journal of Mathematical Analysis and Applications" }
 @String{MathAnaAppl = "J. Math. Anal. Appl." }
 @String{MathAnnalen = "Mathematische Annalen" }
 @String{MathAnnalen = "Math. Ann." }
 @String{MathPhys = "Journal of Mathematical Physics" }
 @String{MathPhys = "J. Math. Phys." }
 @String{MathComp = "Mathematics of Computation" }
 @String{MathComp = "Math. Comp." }
 @String{MathScand = "Mathematica Scandinavica" }
 @String{MathScand = "Math. Scand." }
 @String{TablesAidsComp = "Mathematical Tables and Other Aids to Computation" }
 @String{TablesAidsComp = "Math. Tables Aids Comput." }
 @String{NumerMath = "Numerische Mathematik" }
 @String{NumerMath = "Numer. Math." }
 @String{PacificMath = "Pacific Journal of Mathematics" }
 @String{PacificMath = "Pacific J. Math." }
 @String{ParDistComp = "Journal of Parallel and Distributed Computing" }
 @String{ParDistComp = "J. Parallel and Distrib. Comput." } % didn't find
%% in AMS MR
 @String{ParComputing = "Parallel Computing" }
 @String{ParComputing = "Parallel Comput." }
 @String{PhilMag = "Philosophical Magazine" }
 @String{PhilMag = "Philos. Mag." }
 @String{ProcNAS = "Proceedings of the National Academy of Sciences
                    of the USA" }
 @String{ProcNAS = "Proc. Nat. Acad. Sci. U. S. A." }
 @String{Psychometrika = "Psychometrika" }
 @String{QuartMath = "Quarterly Journal of Mathematics, Oxford, Series (2)" }
 @String{QuartMath = "Quart. J. Math. Oxford Ser. (2)" }
 @String{QuartApplMath = "Quarterly of Applied Mathematics" }
 @String{QuartApplMath = "Quart. Appl. Math." }
 @String{RevueInstStat = "Review of the International Statisical Institute" }
 @String{RevueInstStat = "Rev. Inst. Internat. Statist." }

 %SIAM
 @String{JSIAM = "Journal of the Society for Industrial and Applied
     Mathematics" }
 @String{JSIAM = "J. Soc. Indust. Appl. Math." }
 @String{JSIAMB = "Journal of the Society for Industrial and Applied
     Mathematics, Series B, Numerical Analysis" }
 @String{JSIAMB = "J. Soc. Indust. Appl. Math. Ser. B Numer. Anal." }
 @String{SIAMAlgMeth = "{SIAM} Journal on Algebraic and Discrete Methods" }
 @String{SIAMAlgMeth = "{SIAM} J. Algebraic Discrete Methods" }
 @String{SIAMAppMath = "{SIAM} Journal on Applied Mathematics" }
 @String{SIAMAppMath = "{SIAM} J. Appl. Math." }
 @String{SIAMComp = "{SIAM} Journal on Computing" }
 @String{SIAMComp = "{SIAM} J. Comput." }
 @String{SIAMMatrix = "{SIAM} Journal on Matrix Analysis and Applications" }
 @String{SIAMMatrix = "{SIAM} J. Matrix Anal. Appl." }
 @String{SIAMNumAnal = "{SIAM} Journal on Numerical Analysis" }
 @String{SIAMNumAnal = "{SIAM} J. Numer. Anal." }
 @String{SIAMReview = "{SIAM} Review" }
 @String{SIAMReview = "{SIAM} Rev." }
 @String{SIAMSciStat = "{SIAM} Journal on Scientific and Statistical
     Computing" }
 @String{SIAMSciStat = "{SIAM} J. Sci. Statist. Comput." }

 @String{SoftPracExp = "Software Practice and Experience" }
 @String{SoftPracExp = "Software Prac. Experience" } % didn't find in AMS MR
 @String{StatScience = "Statistical Science" }
 @String{StatScience = "Statist. Sci." }
 @String{Techno = "Technometrics" }
 @String{USSRCompMathPhys = "{USSR} Computational Mathematics and Mathematical
     Physics" }
 @String{USSRCompMathPhys = "{U. S. S. R.} Comput. Math. and Math. Phys." }
 @String{VLSICompSys = "Journal of {VLSI} and Computer Systems" }
 @String{VLSICompSys = "J. {VLSI} Comput. Syst." }
 @String{ZAngewMathMech = "Zeitschrift fur Angewandte Mathematik und
     Mechanik" }
 @String{ZAngewMathMech = "Z. Angew. Math. Mech." }
 @String{ZAngewMathPhys = "Zeitschrift fur Angewandte Mathematik und Physik" }
 @String{ZAngewMathPhys = "Z. Angew. Math. Phys." }

% Publishers % ================================================= |

 @String{Academic = "Academic Press" }
 @String{ACMPress = "{ACM} Press" }
 @String{AdamHilger = "Adam Hilger" }
 @String{AddisonWesley = "Addison-Wesley" }
 @String{AllynBacon = "Allyn and Bacon" }
 @String{AMS = "American Mathematical Society" }
 @String{Birkhauser = "Birkha{\"u}ser" }
 @String{CambridgePress = "Cambridge University Press" }
 @String{Chelsea = "Chelsea" }
 @String{ClaredonPress = "Claredon Press" }
 @String{DoverPub = "Dover Publications" }
 @String{Eyolles = "Eyolles" }
 @String{HoltRinehartWinston = "Holt, Rinehart and Winston" }
 @String{Interscience = "Interscience" }
 @String{JohnsHopkinsPress = "The Johns Hopkins University Press" }
 @String{JohnWileySons = "John Wiley and Sons" }
 @String{Macmillan = "Macmillan" }
 @String{MathWorks = "The Math Works Inc." }
 @String{McGrawHill = "McGraw-Hill" }
 @String{NatBurStd = "National Bureau of Standards" }
 @String{NorthHolland = "North-Holland" }
 @String{OxfordPress = "Oxford University Press" }  %address Oxford or London?
 @String{PergamonPress = "Pergamon Press" }
 @String{PlenumPress = "Plenum Press" }
 @String{PrenticeHall = "Prentice-Hall" }
 @String{SIAMPub = "{SIAM} Publications" }
 @String{Springer = "Springer-Verlag" }
 @String{TexasPress = "University of Texas Press" }
 @String{VanNostrand = "Van Nostrand" }
 @String{WHFreeman = "W. H. Freeman and Co." }

%Entries



@inproceedings{10.1145/3517428.3550392,
    author = {Nowrin, Sadia and Ord\'{o}\~{n}Ez, Patricia and Vertanen, Keith},
    title = {Exploring Motor-Impaired Programmers’ Use of Speech Recognition},
    year = {2022},
    isbn = {9781450392587},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3517428.3550392},
    doi = {10.1145/3517428.3550392},
    abstract = {Typing programs can be difficult or impossible for programmers with motor impairments. Programming by voice can be a promising alternative. In this research, we explored the perceptions of motor-impaired programmers with regard to programming by voice. We learned that leveraging existing voice-based programming platforms to speak code can be more complicated than it needs to be. The interviewees expressed their frustration with long hours of memorizing unnatural commands in order to enter code by voice. In addition, we found a preference for being able to speak code in a flexible manner without requiring strict adherence to a grammar.},
    booktitle = {Proceedings of the 24th International ACM SIGACCESS Conference on Computers and Accessibility},
    articleno = {78},
    numpages = {4},
    keywords = {Voice Programming, Accessibility, Voice User Interfaces, Speech Recognition},
    location = {Athens, Greece},
    series = {ASSETS '22}
}

@INPROCEEDINGS{1698772,
    author={Begel, A. and Graham, S.L.},
    booktitle={Visual Languages and Human-Centric Computing (VL/HCC'06)}, 
    title={An Assessment of a Speech-Based Programming Environment}, 
    year={2006},
    volume={},
    number={},
    pages={116-120},
    abstract={Programmers who suffer from repetitive stress injuries find it difficult to program by typing. Speech interfaces can reduce the amount of typing, but existing programming-by-voice tools make it awkward for programmers to enter and edit program text. We used a human-centric approach to address these problems. We first studied how programmers verbalize code, and found that spoken programs contain lexical, syntactic and semantic ambiguities that do not appear in written programs. Using the results from this study, we designed Spoken Java, a syntactically similar, yet semantically identical variant of Java that is easier to speak. We built an Eclipse IDE plug-in called SPEED (for speech editor) to support the combination of Spoken Java and an associated command language. In this paper, we report the results of the first study ever of any working programming-by-voice system. Our evaluation with expert Java developers showed that most developers had little trouble learning to use the system via spoken commands, but were reluctant to speak literal code out loud. As expected, programmers found programming by voice to be slower than typing},
    keywords={},
    doi={10.1109/VLHCC.2006.9},
    ISSN={1943-6106},
    month={Sep.}
  }

@online{blsinjurydata2020,
  year =         "2020",
  title =        "Survey of Occupational Injuries and Illnesses Data",
  url =          "https://www.bls.gov/iif/nonfatal-injuries-and-illnesses-tables.htm",
  lastaccessed = "November 14, 2022",
  organization = "U.S. Bureau of Labor Statistics",
}

@INPROCEEDINGS{9697255,
  author={Hase, Somnath and Nimbhore, Sunil},
  booktitle={2021 International Conference on Computational Intelligence and Computing Applications (ICCICA)}, 
  title={Speech Recognition: A Concise Significance}, 
  year={2021},
  volume={},
  number={},
  pages={1-7},
  doi={10.1109/ICCICA52458.2021.9697255}
}

@misc{https://doi.org/10.48550/arxiv.2111.01690,
  doi = {10.48550/ARXIV.2111.01690},
  url = {https://arxiv.org/abs/2111.01690},
  author = {Li, Jinyu},
  keywords = {Audio and Speech Processing (eess.AS), Artificial Intelligence (cs.AI), Computation and Language (cs.CL), Sound (cs.SD), FOS: Electrical engineering, electronic engineering, information engineering, FOS: Electrical engineering, electronic engineering, information engineering, FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Recent Advances in End-to-End Automatic Speech Recognition},
  publisher = {arXiv},
  year = {2021},
  copyright = {Creative Commons Attribution 4.0 International}
}

@article{10.1145/3514214,
    author = {Miedema, Daphne and Aivaloglou, Efthimia and Fletcher, George},
    title = {Identifying SQL Misconceptions of Novices: Findings from a Think-Aloud Study},
    year = {2022},
    issue_date = {March 2022},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {13},
    number = {1},
    issn = {2153-2184},
    url = {https://doi.org/10.1145/3514214},
    doi = {10.1145/3514214},
    journal = {ACM Inroads},
    month = {feb},
    pages = {52–65},
    numpages = {14}
}

@inproceedings{10.1145/2729094.2742620,
    author = {Ahadi, Alireza and Prior, Julia and Behbood, Vahid and Lister, Raymond},
    title = {A Quantitative Study of the Relative Difficulty for Novices of Writing Seven Different Types of SQL Queries},
    year = {2015},
    isbn = {9781450334402},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2729094.2742620},
    doi = {10.1145/2729094.2742620},
    abstract = {This paper presents a quantitative analysis of data collected by an online testing system for SQL "select" queries. The data was collected from almost one thousand students, over eight years. We examine which types of queries our students found harder to write. The seven types of SQL queries studied are: simple queries on one table; grouping, both with and without "having"; natural joins; simple and correlated sub-queries; and self-joins. The order of queries in the preceding sentence reflects the order of student difficulty we see in our data.},
    booktitle = {Proceedings of the 2015 ACM Conference on Innovation and Technology in Computer Science Education},
    pages = {201–206},
    numpages = {6},
    keywords = {online assessment, databases, SQL queries},
    location = {Vilnius, Lithuania},
    series = {ITiCSE '15}
}

@inproceedings{mu2019do,
    author = {Mu, Jesse and Sarkar, Advait},
    title = {Do We Need Natural Language? Exploring Restricted Language Interfaces for Complex Domains},
    booktitle = {37th Annual ACM Conference Extended Abstracts on Human Factors in Computing Systems (CHI '19 Extended Abstracts)},
    year = {2019},
    month = {May},
    abstract = {Natural language interfaces (NLIs) that aim to understand arbitrary language are not only difficult to engineer; they can also create unrealistic expectations of the capabilities of the system, resulting in user confusion and disappointment. We use an interactive language learning game in a 3D blocks world to examine whether limiting a user’s communication to a small set of artificial utterances is an acceptable alternative to the much harder task of accepting unrestricted language. We find that such a restricted language interface provides same or better performance on this task while improving user experience indices. This suggests that some NLIs can restrict user languages without sacrificing user experience and highlights the importance of conveying NLI limitations to users.},
    publisher = {ACM},
    url = {https://www.microsoft.com/en-us/research/publication/do-we-need-natural-language-exploring-restricted-language-interfaces-for-complex-domains/},
}

@article{10.1162/COLI_a_00168,
    author = {Kuhn, Tobias},
    title = "{A Survey and Classification of Controlled Natural Languages}",
    journal = {Computational Linguistics},
    volume = {40},
    number = {1},
    pages = {121-170},
    year = {2014},
    month = {03},
    abstract = "{What is here called controlled natural language (CNL) has traditionally been given many different names. Especially during the last four decades, a wide variety of such languages have been designed. They are applied to improve communication among humans, to improve translation, or to provide natural and intuitive representations for formal notations. Despite the apparent differences, it seems sensible to put all these languages under the same umbrella. To bring order to the variety of languages, a general classification scheme is presented here. A comprehensive survey of existing English-based CNLs is given, listing and describing 100 languages from 1930 until today. Classification of these languages reveals that they form a single scattered cloud filling the conceptual space between natural languages such as English on the one end and formal languages such as propositional logic on the other. The goal of this article is to provide a common terminology and a common model for CNL, to contribute to the understanding of their general nature, to provide a starting point for researchers interested in the area, and to help developers to make design decisions.}",
    issn = {0891-2017},
    doi = {10.1162/COLI_a_00168},
    url = {https://doi.org/10.1162/COLI\_a\_00168},
    eprint = {https://direct.mit.edu/coli/article-pdf/40/1/121/1812691/coli\_a\_00168.pdf},
}


@article{doi:10.1287/isre.3.3.252,
author = {Suh, Kil Soo and Milton Jenkins, A.},
title = {A Comparison of Linear Keyword and Restricted Natural Language Data Base Interfaces for Novice Users},
journal = {Information Systems Research},
volume = {3},
number = {3},
pages = {252-272},
year = {1992},
doi = {10.1287/isre.3.3.252},
URL = { 
    https://doi.org/10.1287/isre.3.3.252
},
eprint = { 
        https://doi.org/10.1287/isre.3.3.252
},
    abstract = { This study compares a linear keyword language interface and a restricted natural language interface for data retrieval by a novice user. The comparison focuses on the effect of different data base interfaces on user performance (as measured by query correctness and query writing time) in a query writing task across varying query types and training levels. To accomplish this objective, a laboratory experiment was conducted using a split-plot factorial design using two between-subjects factors and one within-subjects factor. The results indicate that the restricted natural language subjects performed significantly better than the linear keyword language subjects in terms of both query correctness and query writing time. }
}

@misc{https://doi.org/10.48550/arxiv.2212.04356,
  doi = {10.48550/ARXIV.2212.04356},
  url = {https://arxiv.org/abs/2212.04356},
  author = {Radford, Alec and Kim, Jong Wook and Xu, Tao and Brockman, Greg and McLeavey, Christine and Sutskever, Ilya},
  keywords = {Audio and Speech Processing (eess.AS), Computation and Language (cs.CL), Machine Learning (cs.LG), Sound (cs.SD), FOS: Electrical engineering, electronic engineering, information engineering, FOS: Electrical engineering, electronic engineering, information engineering, FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Robust Speech Recognition via Large-Scale Weak Supervision},
  publisher = {arXiv},
  year = {2022},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{https://doi.org/10.48550/arxiv.2201.05966,
  doi = {10.48550/ARXIV.2201.05966},
  url = {https://arxiv.org/abs/2201.05966},
  author = {Xie, Tianbao and Wu, Chen Henry and Shi, Peng and Zhong, Ruiqi and Scholak, Torsten and Yasunaga, Michihiro and Wu, Chien-Sheng and Zhong, Ming and Yin, Pengcheng and Wang, Sida I. and Zhong, Victor and Wang, Bailin and Li, Chengzu and Boyle, Connor and Ni, Ansong and Yao, Ziyu and Radev, Dragomir and Xiong, Caiming and Kong, Lingpeng and Zhang, Rui and Smith, Noah A. and Zettlemoyer, Luke and Yu, Tao},
  keywords = {Computation and Language (cs.CL), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {UnifiedSKG: Unifying and Multi-Tasking Structured Knowledge Grounding with Text-to-Text Language Models},
  publisher = {arXiv},
  year = {2022},
  copyright = {Creative Commons Attribution 4.0 International}
}

@inproceedings{Scholak2021:PICARD,
  author = {Torsten Scholak and Nathan Schucher and Dzmitry Bahdanau},
  title = "{PICARD}: Parsing Incrementally for Constrained Auto-Regressive Decoding from Language Models",
  booktitle = "Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing",
  month = nov,
  year = "2021",
  publisher = "Association for Computational Linguistics",
  url = "https://aclanthology.org/2021.emnlp-main.779",
  pages = "9895--9901",
}

@inproceedings{gan-etal-2021-natural-sql,
    title = "Natural {SQL}: Making {SQL} Easier to Infer from Natural Language Specifications",
    author = "Gan, Yujian  and
      Chen, Xinyun  and
      Xie, Jinxia  and
      Purver, Matthew  and
      Woodward, John R.  and
      Drake, John  and
      Zhang, Qiaofu",
    booktitle = "Findings of the Association for Computational Linguistics: EMNLP 2021",
    month = nov,
    year = "2021",
    address = "Punta Cana, Dominican Republic",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/2021.findings-emnlp.174",
    doi = "10.18653/v1/2021.findings-emnlp.174",
    pages = "2030--2042",
    abstract = "Addressing the mismatch between natural language descriptions and the corresponding SQL queries is a key challenge for text-to-SQL translation. To bridge this gap, we propose an SQL intermediate representation (IR) called Natural SQL (NatSQL). Specifically, NatSQL preserves the core functionalities of SQL, while it simplifies the queries as follows: (1) dispensing with operators and keywords such as GROUP BY, HAVING, FROM, JOIN ON, which are usually hard to find counterparts in the text descriptions; (2) removing the need of nested subqueries and set operators; and (3) making the schema linking easier by reducing the required number of schema items. On Spider, a challenging text-to-SQL benchmark that contains complex and nested SQL queries, we demonstrate that NatSQL outperforms other IRs, and significantly improves the performance of several previous SOTA models. Furthermore, for existing models that do not support executable SQL generation, NatSQL easily enables them to generate executable SQL queries, and achieves the new state-of-the-art execution accuracy.",
}

@article{radford2018improving,
  title={Improving Language Understanding by Generative Pre-Training},
  author={Radford, Alec and Narasimhan, Karthik and Salimans, Tim and Sutskever, Ilya},
  journal={OpenAI},
  year={2018}
}

@misc{https://doi.org/10.48550/arxiv.2005.14165,
  doi = {10.48550/ARXIV.2005.14165},
  url = {https://arxiv.org/abs/2005.14165},
  author = {Brown, Tom B. and Mann, Benjamin and Ryder, Nick and Subbiah, Melanie and Kaplan, Jared and Dhariwal, Prafulla and Neelakantan, Arvind and Shyam, Pranav and Sastry, Girish and Askell, Amanda and Agarwal, Sandhini and Herbert-Voss, Ariel and Krueger, Gretchen and Henighan, Tom and Child, Rewon and Ramesh, Aditya and Ziegler, Daniel M. and Wu, Jeffrey and Winter, Clemens and Hesse, Christopher and Chen, Mark and Sigler, Eric and Litwin, Mateusz and Gray, Scott and Chess, Benjamin and Clark, Jack and Berner, Christopher and McCandlish, Sam and Radford, Alec and Sutskever, Ilya and Amodei, Dario},
  keywords = {Computation and Language (cs.CL), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Language Models are Few-Shot Learners},
  publisher = {arXiv},
  journal = {OpenAI},
  year = {2020},
  copyright = {arXiv.org perpetual, non-exclusive license}
}


@article{MOHAMMADPOOR2020321,
title = {Big Data analytics in oil and gas industry: An emerging trend},
journal = {Petroleum},
volume = {6},
number = {4},
pages = {321-328},
year = {2020},
note = {SI: Artificial Intelligence (AI), Knowledge-based Systems (KBS), and Machine Learning (ML)},
issn = {2405-6561},
doi = {https://doi.org/10.1016/j.petlm.2018.11.001},
url = {https://www.sciencedirect.com/science/article/pii/S2405656118301421},
author = {Mehdi Mohammadpoor and Farshid Torabi},
keywords = {Big Data, Hadoop, R, Oil and gas industry},
abstract = {This paper reviews the utilization of Big Data analytics, as an emerging trend, in the upstream and downstream oil and gas industry. Big Data or Big Data analytics refers to a new technology which can be employed to handle large datasets which include six main characteristics of volume, variety, velocity, veracity, value, and complexity. With the recent advent of data recording sensors in exploration, drilling, and production operations, oil and gas industry has become a massive data intensive industry. Analyzing seismic and micro-seismic data, improving reservoir characterization and simulation, reducing drilling time and increasing drilling safety, optimization of the performance of production pumps, improved petrochemical asset management, improved shipping and transportation, and improved occupational safety are among some of the applications of Big Data in oil and gas industry. Although the oil and gas industry has become more interested in utilizing Big Data analytics recently, but, there are still challenges mainly due to lack of business support and awareness about the Big Data within the industry. Furthermore, quality of the data and understanding the complexity of the problem are also among the challenging parameters facing the application of Big Data.}
}

@misc{armydatascientists,
  title = {From the Server to the Battlefield, How data Scientists are Key to Winning Future Conflicts},
  howpublished = {\url{https://www.army.mil/article/249036/from_the_server_to_the_battlefield_how_data_scientists_are_key_to_winning_future_conflicts}},
  note = {Accessed: 2023-01-20},
  author = {LTC Jason Crist},
  year = {2021}
}

@article{10.14778/3415478.3415496,
author = {Trummer, Immanuel},
title = {Demonstrating the Voice-Based Exploration of Large Data Sets with CiceroDB-Zero},
year = {2020},
issue_date = {August 2020},
publisher = {VLDB Endowment},
volume = {13},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3415478.3415496},
doi = {10.14778/3415478.3415496},
abstract = {This demonstration enables participants to explore large data sets via voice interfaces. The focus of the demonstration is on methods generating concise speech descriptions of query results, specified by users via voice input. The technical novelty of the demonstrated system lies in the fact that processing overheads are mostly moved into a pre-processing phase, generating speeches for batches of queries defined via templates. Visitors can access the demo via smart speakers on-site or via their own smart phones. They will be able to customize the generated voice descriptions and to tune voice output methods.},
journal = {Proc. VLDB Endow.},
month = {sep},
pages = {2869–2872},
numpages = {4}
}

@inproceedings{10.1145/2882903.2899394,
author = {Lyons, Gabriel and Tran, Vinh and Binnig, Carsten and Cetintemel, Ugur and Kraska, Tim},
title = {Making the Case for Query-by-Voice with EchoQuery},
year = {2016},
isbn = {9781450335317},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2882903.2899394},
doi = {10.1145/2882903.2899394},
abstract = {Recent advances in automatic speech recognition and natural language processing have led to a new generation of robust voice-based interfaces. Yet, there is very little work on using voice-based interfaces to query database systems. In fact, one might even wonder who in her right mind would want to query a database system using voice commands! With this demonstration, we make the case for querying database systems using a voice-based interface, a new querying and interaction paradigm we call Query-by-Voice (QbV). We will demonstrate the practicality and utility of QbV for relational DBMSs using a using a proof-of-concept system called EchoQuery. To achieve a smooth and intuitive interaction, the query interface of EchoQuery is inspired by casual human-to-human conversations. Our demo will show that voice-based interfaces present an intuitive means of querying and consuming data in a database. It will also highlight the unique advantages of QbV over the more traditional approaches, text-based or visual interfaces, for applications where context switching is too expensive, too risky or even not possible at all.},
booktitle = {Proceedings of the 2016 International Conference on Management of Data},
pages = {2129–2132},
numpages = {4},
keywords = {data exploration, natural language interfaces},
location = {San Francisco, California, USA},
series = {SIGMOD '16}
}


@article{10.14778/3476249.3476289,
author = {Wei, Ziyun and Trummer, Immanuel and Anderson, Connor},
title = {Robust Voice Querying with MUVE: Optimally Visualizing Results of Phonetically Similar Queries},
year = {2021},
issue_date = {July 2021},
publisher = {VLDB Endowment},
volume = {14},
number = {11},
issn = {2150-8097},
url = {https://doi.org/10.14778/3476249.3476289},
doi = {10.14778/3476249.3476289},
abstract = {Recently proposed voice query interfaces translate voice input into SQL queries. Unreliable speech recognition on top of the intrinsic challenges of text-to-SQL translation makes it hard to reliably interpret user input. We present MUVE (Multiplots for Voice quEries), a system for robust voice querying. MUVE reduces the impact of ambiguous voice queries by filling the screen with multiplots, capturing results of phonetically similar queries. It maps voice input to a probability distribution over query candidates, executes a selected subset of queries, and visualizes their results in a multiplot.Our goal is to maximize probability to show the correct query result. Also, we want to optimize the visualization (e.g., by coloring a subset of likely results) in order to minimize expected time until users find the correct result. Via a user study, we validate a simple cost model estimating the latter overhead. The resulting optimization problem is NP-hard. We propose an exhaustive algorithm, based on integer programming, as well as a greedy heuristic. As shown in a corresponding user study, MUVE enables users to identify accurate results faster, compared to prior work.},
journal = {Proc. VLDB Endow.},
month = {oct},
pages = {2397–2409},
numpages = {13}
}

@misc{openai-chatgpt-blog-post,
  title={ChatGPT: Optimizing Language Models for Dialogue},
  author={OpenAI},
  howpublished={\url{https://openai.com/blog/chatgpt/}},
  year={[2022]}
}

@article{10.14778/2536274.2536311,
author = {Jiang, Lilong and Mandel, Michael and Nandi, Arnab},
title = {GestureQuery: A Multitouch Database Query Interface},
year = {2013},
issue_date = {August 2013},
publisher = {VLDB Endowment},
volume = {6},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/2536274.2536311},
doi = {10.14778/2536274.2536311},
abstract = {Multitouch interfaces allow users to directly and interactively manipulate data. We propose bringing such interactive manipulation to the task of querying SQL databases. This paper describes an initial implementation of such an interface for multitouch tablet devices called GestureQuery that translates multitouch gestures into database queries. It provides database users with immediate constructive feedback on their queries, allowing rapid iteration and refinement of those queries. Based on preliminary user studies, Gesture-Query is easier to use, and lets users construct target queries quicker than console-based SQL and visual query builders while maintaining interactive performance.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {1342–1345},
numpages = {4}
}

@article{10.1145/3571730,
author = {Ji, Ziwei and Lee, Nayeon and Frieske, Rita and Yu, Tiezheng and Su, Dan and Xu, Yan and Ishii, Etsuko and Bang, Yejin and Madotto, Andrea and Fung, Pascale},
title = {Survey of Hallucination in Natural Language Generation},
year = {2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
issn = {0360-0300},
url = {https://doi.org/10.1145/3571730},
doi = {10.1145/3571730},
abstract = {Natural Language Generation (NLG) has improved exponentially in recent years thanks to the development of sequence-to-sequence deep learning technologies such as Transformer-based language models. This advancement has led to more fluent and coherent NLG, leading to improved development in downstream tasks such as abstractive summarization, dialogue generation and data-to-text generation. However, it is also apparent that deep learning based generation is prone to hallucinate unintended text, which degrades the system performance and fails to meet user expectations in many real-world scenarios. To address this issue, many studies have been presented in measuring and mitigating hallucinated texts, but these have never been reviewed in a comprehensive manner before. In this survey, we thus provide a broad overview of the research progress and challenges in the hallucination problem in NLG. The survey is organized into two parts: (1) a general overview of metrics, mitigation methods, and future directions; and (2) an overview of task-specific research progress on hallucinations in the following downstream tasks, namely abstractive summarization, dialogue generation, generative question answering, data-to-text generation, and machine translation. This survey serves to facilitate collaborative efforts among researchers in tackling the challenge of hallucinated texts in NLG.},
note = {Just Accepted},
journal = {ACM Comput. Surv.},
month = {nov},
keywords = {Intrinsic Hallucination, Consistency in NLG, Extrinsic Hallucination, Faithfulness in NLG, Hallucination, Factuality in NLG}
}

@article{10.1007/s10664-013-9279-3,
author = {Ko, Amy J. and LaToza, Thomas D. and Burnett, Margaret M.},
title = {A Practical Guide to Controlled Experiments of Software Engineering Tools with Human Participants},
year = {2015},
issue_date = {Feb 2015},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {20},
number = {1},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-013-9279-3},
doi = {10.1007/s10664-013-9279-3},
abstract = {Empirical studies, often in the form of controlled experiments, have been widely adopted in software engineering research as a way to evaluate the merits of new software engineering tools. However, controlled experiments involving human participants actually using new tools are still rare, and when they are conducted, some have serious validity concerns. Recent research has also shown that many software engineering researchers view this form of tool evaluation as too risky and too difficult to conduct, as they might ultimately lead to inconclusive or negative results. In this paper, we aim both to help researchers minimize the risks of this form of tool evaluation, and to increase their quality, by offering practical methodological guidance on designing and running controlled experiments with developers. Our guidance fills gaps in the empirical literature by explaining, from a practical perspective, options in the recruitment and selection of human participants, informed consent, experimental procedures, demographic measurements, group assignment, training, the selecting and design of tasks, the measurement of common outcome variables such as success and time on task, and study debriefing. Throughout, we situate this guidance in the results of a new systematic review of the tool evaluations that were published in over 1,700 software engineering papers published from 2001 to 2011.},
journal = {Empirical Softw. Engg.},
month = {feb},
pages = {110–141},
numpages = {32},
keywords = {Experiments, Human subjects, Research methodology, Tools, Human participants}
}


@article{Astrahan1975,
    author = {Astrahan, M. M. and Chamberlin, D. D.},
    title = {Implementation of a Structured English Query Language},
    year = {1975},
    issue_date = {Oct. 1975},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {18},
    number = {10},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/361020.361215},
    doi = {10.1145/361020.361215},
    abstract = {The relational model of data, the XRM Relational Memory System, and the SEQUEL language
    have been covered in previous papers and are reviewed. SEQUEL is a relational data
    sublanguage intended for ad hoc interactive problem solving by non-computer specialists.
    A version of SEQUEL that has been implemented in a prototype interpreter is described.
    The interpreter is designed to minimize the data accessing operations required to
    respond to an arbitrary query. The optimization algorithms designed for this purpose
    are described.},
    journal = {Commun. ACM},
    month = oct,
    pages = {580–588},
    numpages = {9},
    keywords = {data structure, query language, database, data organization, relational model, nonprocedural language}
}

@article{Astrahan1976,
    author = {Astrahan, M. M. and Blasgen, M. W. and Chamberlin, D. D. and Eswaran, K. P. and Gray, J. N. and Griffiths, P. P. and King, W. F. and Lorie, R. A. and McJones, P. R. and Mehl, J. W. and Putzolu, G. R. and Traiger, I. L. and Wade, B. W. and Watson, V.},
    title = {System R: Relational Approach to Database Management},
    year = {1976},
    issue_date = {June 1976},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {1},
    number = {2},
    issn = {0362-5915},
    url = {https://doi.org/10.1145/320455.320457},
    doi = {10.1145/320455.320457},
    abstract = {System R is a database management system which provides a high level relational data
    interface. The systems provides a high level of data independence by isolating the
    end user as much as possible from underlying storage structures. The system permits
    definition of a variety of relational views on common underlying data. Data control
    features are provided, including authorization, integrity assertions, triggered transactions,
    a logging and recovery subsystem, and facilities for maintaining data consistency
    in a shared-update environment.This paper contains a description of the overall architecture
    and design of the system. At the present time the system is being implemented and
    the design evaluated. We emphasize that System R is a vehicle for research in database
    architecture, and is not planned as a product.},
    journal = {ACM Trans. Database Syst.},
    month = jun,
    pages = {97–137},
    numpages = {41},
    keywords = {recovery, nonprocedural language, index structures, locking, database, data structures, authorization, relational model}
}

@inproceedings{Chamberlin1974,
    author = {Chamberlin, Donald D. and Boyce, Raymond F.},
    title = {SEQUEL: A Structured English Query Language},
    year = {1974},
    isbn = {9781450374156},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/800296.811515},
    doi = {10.1145/800296.811515},
    abstract = {In this paper we present the data manipulation facility for a structured English query
    language (SEQUEL) which can be used for accessing data in an integrated relational
    data base. Without resorting to the concepts of bound variables and quantifiers SEQUEL
    identifies a set of simple operations on tabular structures, which can be shown to
    be of equivalent power to the first order predicate calculus. A SEQUEL user is presented
    with a consistent set of keyword English templates which reflect how people use tables
    to obtain information. Moreover, the SEQUEL user is able to compose these basic templates
    in a structured manner in order to form more complex queries. SEQUEL is intended as
    a data base sublanguage for both the professional programmer and the more infrequent
    data base user.},
    booktitle = {Proceedings of the 1974 ACM SIGFIDET (Now SIGMOD) Workshop on Data Description, Access and Control},
    pages = {249–264},
    numpages = {16},
    keywords = {Information Retrieval, Data Manipulation Languages, Query Languages, Data Base Management Systems},
    location = {Ann Arbor, Michigan},
    series = {SIGFIDET '74}
}

@article{Chamberlin1976,
    author = {Chamberlin, D. D. and Astrahan, M. M. and Eswaran, K. P. and Griffiths, P. P. and Lorie, R. A. and Mehl, J. W. and Reisner, P. and Wade, B. W.},
    title = {SEQUEL 2: A Unified Approach to Data Definition, Manipulation, and Control},
    year = {1976},
    issue_date = {November 1976},
    publisher = {IBM Corp.},
    address = {USA},
    volume = {20},
    number = {6},
    issn = {0018-8646},
    url = {https://doi.org/10.1147/rd.206.0560},
    doi = {10.1147/rd.206.0560},
    abstract = {SEQUEL 2 is a relational data language that provides a consistent, English keyword-oriented
    set of facilities for query, data definition, data manipulation, and datac ontrol.
    SEQUEL 2 may be used either as a stand-alone interface for nonspecialists in data
    processing or as a data sublanguage embedded in a host programming language for use
    by application programmers and data base administrators. This paper describes SEQUEL
    2 and the means by which it is coupled to a host language.},
    journal = {IBM J. Res. Dev.},
    month = nov,
    pages = {560–575},
    numpages = {16}
}

@article{Date1984,
    author = {Date, C. J.},
    title = {A Critique of the SQL Database Language},
    year = {1984},
    issue_date = {November 1984},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {14},
    number = {3},
    issn = {0163-5808},
    url = {https://doi.org/10.1145/984549.984551},
    doi = {10.1145/984549.984551},
    abstract = {The ANS Database Committee (X3H2) is currently at work on a proposed standard relational
    database language (RDL), and has adopted as a basis for that activity a definition
    of the "structured query language" SQL from IBM [10]. Moreover, numerous hardware
    and software vendors (in addition to IBM) have already released or at least announced
    products that are based to a greater or lesser extent on the SQL language as defined
    by IBM. There can thus be little doubt that the importance of that language will increase
    significantly over the next few years. Yet the SQL language is very far from perfect.
    The purpose of this paper is to present a critical analysis of the language's major
    shortcomings, in the hope that it may be possible to remedy some of the deficiencies
    before their influence becomes too all-pervasive. The paper's standpoint is primarily
    that of formal computer languages in general, rather than that of database languages
    specifically.},
    journal = {SIGMOD Rec.},
    month = nov,
    pages = {8–54},
    numpages = {47}
}

@article{Kim2020,
   abstract = {Translating natural language to SQL (NL2SQL) has received extensive attention lately, especially with the recent success of deep learning technologies. However, despite the large number of studies, we do not have a thorough understanding of how good existing techniques really are and how much is applicable to real-world situations. A key difficulty is that different studies are based on different datasets, which often have their own limitations and assumptions that are implicitly hidden in the context or datasets. Moreover, a couple of evaluation metrics are commonly employed but they are rather simplistic and do not properly depict the accuracy of results, as will be shown in our experiments. To provide a holistic view of NL2SQL technologies and access current advancements, we perform extensive experiments under our unified framework using eleven of recent techniques over 10+ benchmarks including a new benchmark (WTQ) and TPC-H. We provide a comprehensive survey of recent NL2SQL methods, introducing a taxonomy of them. We reveal major assumptions of the methods and classify translation errors through extensive experiments. We also provide a practical tool for validation by using existing, mature database technologies such as query rewrite and database testing. We then suggest future research directions so that the translation can be used in practice.},
   author = {Hyeonji Kim and Byeong Hoon So and Wook Shin Han and Hongrae Lee},
   doi = {10.14778/3401960.3401970},
   issn = {21508097},
   issue = {10},
   journal = {Proceedings of the VLDB Endowment},
   month = {6},
   pages = {1737-1750},
   publisher = {VLDB Endowment},
   title = {Natural language to SQL: Where are we today?},
   volume = {13},
   year = {2020},
}
@inproceedings{Lyons2016,
   abstract = {Recent advances in automatic speech recognition and natural language processing have led to a new generation of robust voice-based interfaces. Yet, there is very little work on using voice-based interfaces to query database systems. In fact, one might even wonder who in her right mind would want to query a database system using voice commands! With this demonstration, we make the case for querying database systems using a voice-based interface, a new querying and interaction paradigm we call Query-by-Voice (QbV ). We will demonstrate the practicality and utility of QbV for relational DBMSs using a using a proof-of-concept system called EchoQuery. To achieve a smooth and intuitive interaction, the query interface of EchoQuery is inspired by casual human-to-human conversations. Our demo will show that voice-based interfaces present an intuitive means of querying and consuming data in a database. It will also highlight the unique advantages of QbV over the more traditional approaches, text-based or visual interfaces, for applications where context switching is too expensive, too risky or even not possible at all.},
   author = {Gabriel Lyons and Vinh Tran and Carsten Binnig and Ugur Cetintemel and Tim Kraska},
   doi = {10.1145/2882903.2899394},
   isbn = {9781450335317},
   issn = {07308078},
   journal = {Proceedings of the ACM SIGMOD International Conference on Management of Data},
   month = {6},
   pages = {2129-2132},
   publisher = {Association for Computing Machinery},
   title = {Making the case for query-by-voice with echoquery},
   volume = {26-June-2016},
   year = {2016},
}

@inproceedings{Obaido2019,
   abstract = {In the software industry, Structured Query Language (SQL) remains a highly sought-after skill required by most employers. SQL is widely adopted as the preferred declarative language to manipulate data in relational databases. However, the process of comprehending written and new queries turns out to be difficult, especially for novices. To address this problem, a plethora of tools have been developed to assist a novice understand queries using different approaches via visualisation and narration. This paper describes a SQL Narrator designed using a Context-free Grammar that reads and generates narrations for queries using predefined templates. The SQL Narrator is able to narrate nested queries cascaded with balanced parentheses. The generated narrations can be used in assisting students to comprehend nested SQL queries in learning environments. A survey conducted on 161 participants showed that 98.1% agreed that they were able to understand nested queries using our SQL Narrator.},
   author = {George Obaido and Abejide Ade-Ibijola and Hima Vadapalli},
   doi = {10.1109/ICTAS.2019.8703620},
   isbn = {9781538673652},
   journal = {2019 Conference on Information Communications Technology and Society, ICTAS 2019},
   keywords = {Comprehension aid for queries,Context-free grammar applications,Learning via narrations,SQL query narration},
   month = {4},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Generating narrations of nested SQL queries using context-free grammars},
   year = {2019},
}

@inproceedings{Parr2014,
    author = {Parr, Terence and Harwell, Sam and Fisher, Kathleen},
    title = {Adaptive LL(*) Parsing: The Power of Dynamic Analysis},
    year = {2014},
    isbn = {9781450325851},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2660193.2660202},
    doi = {10.1145/2660193.2660202},
    abstract = {Despite the advances made by modern parsing strategies such as PEG, LL(*), GLR, and GLL, parsing is not a solved problem. Existing approaches suffer from a number of weaknesses, including difficulties supporting side-effecting embedded actions, slow and/or unpredictable performance, and counter-intuitive matching strategies. This paper introduces the ALL(*) parsing strategy that combines the simplicity, efficiency, and predictability of conventional top-down LL(k) parsers with the power of a GLR-like mechanism to make parsing decisions. The critical innovation is to move grammar analysis to parse-time, which lets ALL(*) handle any non-left-recursive context-free grammar. ALL(*) is O(n4) in theory but consistently performs linearly on grammars used in practice, outperforming general strategies such as GLL and GLR by orders of magnitude. ANTLR 4 generates ALL(*) parsers and supports direct left-recursion through grammar rewriting. Widespread ANTLR 4 use (5000 downloads/month in 2013) provides evidence that ALL(*) is effective for a wide variety of applications.},
    booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
    pages = {579–598},
    numpages = {20},
    keywords = {grammar, peg, all(*), nondeterministic parsing, ll(*), augmented transition networks, gll, dfa, glr},
    location = {Portland, Oregon, USA},
    series = {OOPSLA '14}
}

@inproceedings{Reisner1975,
    author = {Reisner, Phyllis and Boyce, Raymond F. and Chamberlin, Donald D.},
    title = {Human Factors Evaluation of Two Data Base Query Languages: Square and Sequel},
    year = {1975},
    isbn = {9781450379199},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1499949.1500036},
    doi = {10.1145/1499949.1500036},
    abstract = {Boyce et al. have recently described two data base query languages, SQUARE and SEQUEL,
    which are intended for use in an interactive mode by both programmers and professional
    non-programmers (e.g., accountants, lawyers, managers). The languages are comparable
    in the sense that the basic operators, underlying data structures and intended use
    are the same. They differ primarily in syntactic form, with a few additional differences
    in some of the specific features. Both of the languages are intended to be easily
    learned and used by people without specialized computer training.},
    booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
    pages = {447–452},
    numpages = {6},
    location = {Anaheim, California},
    series = {AFIPS '75}
}

@ARTICLE{Reisner1977,
    author={Reisner, P.},
    journal={IEEE Transactions on Software Engineering}, 
    title={Use of Psychological Experimentation as an Aid to Development of a Query Language}, 
    year={1977},
    volume={SE-3},
    number={3},
    pages={218-229},
    abstract={This paper describes a series of psychological experiments used to test a new data base query language. The intent is to make psychological testing of a language part of the design and development process. By testing a language while it is still under development, features that require changing can bs identified and the changes made.},
    keywords={},
    doi={10.1109/TSE.1977.231131},
    ISSN={1939-3520},
    month={May}
}

@INPROCEEDINGS{Ruksana2021,
  author={A, Ruksana Banu. and Al Siyabi, Wedad Salim Ali and Al Minje, Yusra},
  booktitle={2021 International Conference on Software Engineering   Computer Systems and 4th International Conference on Computational Science and Information Management (ICSECS-ICOCSIM)}, 
  title={A Conceptual Review on Integration of Cognitive Load Theory and Human-Computer Interaction}, 
  year={2021},
  volume={},
  number={},
  pages={667-672},
  doi={10.1109/ICSECS52883.2021.00127}}


@report{Shah2020tr,
   abstract = "Speech-driven querying is becoming popular in new device environments such as smartphones, tablets, and even conversational assistants. However, such querying is largely restricted to natural language. Typed SQL remains the gold standard for sophisticated structured querying although it is painful in many environments, which restricts when and how users consume their data. In this work, we propose to bridge this gap by designing a speech-driven querying system and interface for structured data we call SpeakQL. We support a practically useful subset of regular SQL and allow users to query in any domain with novel touch/speech based human-in-the-loop correction mechanisms. Automatic speech recognition (ASR) introduces myriad forms of errors in transcriptions , presenting us with a technical challenge. We exploit our observations of SQL's properties, its grammar, and the queried database to build a modular architecture. We present the first dataset of spoken SQL queries and a generic approach to generate them for any arbitrary schema. Our experiments show that SpeakQL can automatically correct a large fraction of errors in ASR transcriptions. User studies show that SpeakQL can help users specify SQL queries significantly faster with a speedup of average 2.7x and up to 6.7x compared to typing on a tablet device. SpeakQL also reduces the user effort in specifying queries by a factor of average 10x and up to 60x compared to raw typing effort.",
   author = "Removed author list for anonymity",
   title = "SpeakQL: Towards Speech-driven Multimodal Querying of Structured Data",
   year = "2020",
}
@article{Shah2020,
   abstract = {Speech-driven querying is becoming popular in new device environments such as smartphones, tablets, and even conversational assistants. However, such querying is largely restricted to natural language. Typed SQL remains the gold standard for sophisticated structured querying although it is painful in many environments, which restricts when and how users consume their data. In this work, we propose to bridge this gap by designing a speech-driven querying system and interface for structured data we call SpeakQL. We support a practically useful subset of regular SQL and allow users to query in any domain with novel touch/speech based human-in-the-loop correction mechanisms. Automatic speech recognition (ASR) introduces myriad forms of errors in transcriptions, presenting us with a technical challenge. We exploit our observations of SQL's properties, its grammar, and the queried database to build a modular architecture. We present the first dataset of spoken SQL queries and a generic approach to generate them for any arbitrary schema. Our experiments show that SpeakQL can automatically correct a large fraction of errors in ASR transcriptions. User studies show that SpeakQL can help users specify SQL queries significantly faster with a speedup of average 2.7x and up to 6.7x compared to typing on a tablet device. SpeakQL also reduces the user effort in specifying queries by a factor of average 10x and up to 60x compared to raw typing effort.},
   author = {Removed author list for anonymity},
   doi = {10.1145/3318464.3389777},
   isbn = {9781450367356},
   issn = {07308078},
   journal = {Proceedings of the ACM SIGMOD International Conference on Management of Data},
   keywords = {SQL,multimodal,speech-driven},
   pages = {2363-2374},
   title = {SpeakQL: Towards Speech-driven Multimodal Querying of Structured Data},
   year = {2020},
   note = {Anonymized version included as supplementary material in PCS}
}

@inproceedings{Thomas1975,
    author = {Thomas, John C. and Gould, John D.},
    title = {A Psychological Study of Query by Example},
    year = {1975},
    isbn = {9781450379199},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1499949.1500035},
    doi = {10.1145/1499949.1500035},
    abstract = {Many different query systems have been proposed. One way to partition extant and hypothetical
    query systems is on the basis of how English-like they are. One approach for an easy-to-use
    query system is to allow the user to state a question in natural English. The system
    may then disambiguate the possible interpretations of this question on the basis of
    context or on the basis of feedback questions to the user. A second approach is to
    require the user to state his question in a formal language system, but one that uses
    an English-like grammar and vocabulary. IBM's Interactive Query Facility (IQF) and
    SEQUEL exemplify this type of approach. A third approach is to require the user to
    state his question in a formal language system that does not attempt to appear "English-like."
    Zloof's Query By Example language is best described by this third approach. In this
    paper we demonstrate experimentally the ease and accuracy with which nonprogrammers
    learned and used this powerful Query By Example language.},
    booktitle = {Proceedings of the May 19-22, 1975, National Computer Conference and Exposition},
    pages = {439–445},
    numpages = {7},
    location = {Anaheim, California},
    series = {AFIPS '75}
}


@article{Towse1995,
   abstract = {This paper considers working memory capacity, critically examining the hypothesis that 
   counting span (the ability to count arrays of objects and store count totals) reflects a trade-off 
   in resources available for processing and short-term storage. Previous evidence interpreted as favouring 
   this hypothesis has confounded task difficulty with counting time. Experiment 1 validated a manipulation 
   of the attentional demands of counting in which target objects were differentiated from non-targets by 
   either a single feature (colour) or a feature conjunction (a combination of line orientations). 
   The results confirmed that the two presentations involved qualitatively different attentional loads. 
   Experiment 2 used these displays to compare counting span for children aged 6 to 11, both with and 
   without an adjustment of target numerosity to control for differences in processing time. At all ages,
   span was lower when counting took longer, but there was no difference between feature and conjunction 
   arrays once counting time was accounted for. These results argue against a resource trade-off 
   interpretation of counting span. Rather, they support a hypothesis of resource-switching among children, 
   implying that counting span acts as a measure of time-based forgetting. 
   © 1995, Taylor & Francis Group, LLC. All rights reserved.},
   author = {J. N. Towse and G. J. Hitch},
   doi = {10.1080/14640749508401379},
   issn = {14640740},
   issue = {1},
   journal = {The Quarterly Journal of Experimental Psychology Section A},
   month = {2},
   pages = {108-124},
   pmid = {7754077},
   title = {Is there a Relationship between Task Demand and Storage Space in Tests of Working Memory Capacity?},
   volume = {48},
   year = {1995},
}

@article{Vandierendonck1997,
author = { Andre Vandierendonck Gino De   Vooght },
title = {Working Memory Constraints on Linear Reasoning with Spatial and Temporal Contents},
journal = {The Quarterly Journal of Experimental Psychology Section A},
volume = {50},
number = {4},
pages = {803-820},
year  = {1997},
publisher = {Routledge},
doi = {10.1080/713755735},
    note ={PMID: 9450380},

URL = { 
        https://doi.org/10.1080/713755735
    
},
eprint = { 
        https://doi.org/10.1080/713755735
    
}

}

@book{10.5555/2501707,
author = {MacKenzie, I. Scott},
title = {Human-Computer Interaction: An Empirical Research Perspective},
year = {2013},
isbn = {0124058655},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
edition = {1st},
abstract = {Human-Computer Interaction: An Empirical Research Perspective is the definitive guide to empirical research in HCI. The book begins with foundational topics including historical context, the human factor, interaction elements, and the fundamentals of science and research. From there, you'll progress to learning about the methods for conducting an experiment to evaluate a new computer interface or interaction technique. There are detailed discussions and how-to analyses on models of interaction, focusing on descriptive models and predictive models. Writing and publishing a research paper is explored with helpful tips for success. Throughout the book, you'll find hands-on exercises, checklists, and real-world examples. This is your must-have, comprehensive guide to empirical and experimental research in HCI-an essential addition to your HCI library. Master empirical and experimental research with this comprehensive, A-to-Z guide in a concise, hands-on reference Discover the practical and theoretical ins-and-outs of user studies Find exercises, takeaway points, and case studies throughout}
}

% Statistics packages and other software used:

@inproceedings{seabold2010statsmodels,
  title={statsmodels: Econometric and statistical modeling with python},
  author={Seabold, Skipper and Perktold, Josef},
  booktitle={9th Python in Science Conference},
  year={2010},
}

@misc{kelechava_2020, 
title={The SQL standard - ISO/IEC 9075:2016 (ANSI X3.135)}, 
url={https://blog.ansi.org/2018/10/sql-standard-iso-iec-9075-2016-ansi-x3-135/#gref}, 
journal={The ANSI Blog}, 
author={Kelechava, Brad}, 
year={2020}, 
month={Jul}
} 


@misc{antlrgrammarsv4,
  title = {grammars-v4},
  year = {2022},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/antlr/grammars-v4}},
  commit = {6a084712f0875d3508cdeb2926a95b1e7b524400}
}

@book{DBLP:books/aw/AbiteboulHV95,
    author    = {Serge Abiteboul and
                Richard Hull and
                Victor Vianu},
    title     = {Foundations of Databases},
    publisher = {Addison-Wesley},
    year      = {1995},
    isbn      = {0-201-53771-0},
    bibsource = {DBLP, http://dblp.uni-trier.de},
    read={yes}
}


@online{webpage,
  title={SpeakQL Project Webpage},
  year = {Accessed January 31, 2023},
  Note = {URL removed}
}

@online{techreport,
  title={Tech Report: Design and Evaluation of an SQL-Based Dialect for Spoken Querying},
  author={Removed author list for anonymity},
  year = {Accessed January 31, 2023},
  Note = {URL removed}
}

@misc{joshi2023flame,
      title={FLAME: A small language model for spreadsheet formulas}, 
      author={Harshit Joshi and Abishai Ebenezer and José Cambronero and Sumit Gulwani and Aditya Kanade and Vu Le and Ivan Radiček and Gust Verbruggen},
      year={2023},
      eprint={2301.13779},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@inproceedings{10.1145/3318464.3383128,
author = {undefinedzcan, Fatma and Quamar, Abdul and Sen, Jaydeep and Lei, Chuan and Efthymiou, Vasilis},
title = {State of the Art and Open Challenges in Natural Language Interfaces to Data},
year = {2020},
isbn = {9781450367356},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318464.3383128},
doi = {10.1145/3318464.3383128},
abstract = {Recent advances in natural language understanding and processing resulted in renewed interest in natural language based interfaces to data, which provide an easy mechanism for non-technical users to access and query the data. While early systems only allowed simple selection queries over a single table, some recent work supports complex BI queries, with many joins and aggregation, and even nested queries. There are various approaches in the literature for interpreting user's natural language query. Rule-based systems try to identify the entities in the query, and understand the intended relationships between those entities. Recent years have seen the emergence and popularity of neural network based approaches which try to interpret the query holistically, by learning the patterns. In this tutorial, we will review these natural language interface solutions in terms of their interpretation approach, as well as the complexity of the queries they can generate. We will also discuss open research challenges.},
booktitle = {Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data},
pages = {2629–2636},
numpages = {8},
keywords = {natural language interfaces, conversation systems, natural language query},
location = {Portland, OR, USA},
series = {SIGMOD '20}
}

@article{10.14778/2336664.2336667,
author = {Blunschi, Lukas and Jossen, Claudio and Kossmann, Donald and Mori, Magdalini and Stockinger, Kurt},
title = {SODA: Generating SQL for Business Users},
year = {2012},
issue_date = {June 2012},
publisher = {VLDB Endowment},
volume = {5},
number = {10},
issn = {2150-8097},
url = {https://doi.org/10.14778/2336664.2336667},
doi = {10.14778/2336664.2336667},
abstract = {The purpose of data warehouses is to enable business analysts to make better decisions. Over the years the technology has matured and data warehouses have become extremely successful. As a consequence, more and more data has been added to the data warehouses and their schemas have become increasingly complex. These systems still work great in order to generate pre-canned reports. However, with their current complexity, they tend to be a poor match for non tech-savvy business analysts who need answers to ad-hoc queries that were not anticipated.This paper describes the design, implementation, and experience of the SODA system (Search over DAta Warehouse). SODA bridges the gap between the business needs of analysts and the technical complexity of current data warehouses. SODA enables a Google-like search experience for data warehouses by taking keyword queries of business users and automatically generating executable SQL. The key idea is to use a graph pattern matching algorithm that uses the metadata model of the data warehouse. Our results with real data from a global player in the financial services industry show that SODA produces queries with high precision and recall, and makes it much easier for business users to interactively explore highly-complex data warehouses.},
journal = {Proc. VLDB Endow.},
month = {jun},
pages = {932–943},
numpages = {12}
}

@article{10.14778/2994509.2994536,
author = {Saha, Diptikalyan and Floratou, Avrilia and Sankaranarayanan, Karthik and Minhas, Umar Farooq and Mittal, Ashish R. and \"{O}zcan, Fatma},
title = {ATHENA: An Ontology-Driven System for Natural Language Querying over Relational Data Stores},
year = {2016},
issue_date = {August 2016},
publisher = {VLDB Endowment},
volume = {9},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/2994509.2994536},
doi = {10.14778/2994509.2994536},
abstract = {In this paper, we present ATHENA, an ontology-driven system for natural language querying of complex relational databases. Natural language interfaces to databases enable users easy access to data, without the need to learn a complex query language, such as SQL. ATHENA uses domain specific ontologies, which describe the semantic entities, and their relationships in a domain. We propose a unique two-stage approach, where the input natural language query (NLQ) is first translated into an intermediate query language over the ontology, called OQL, and subsequently translated into SQL. Our two-stage approach allows us to decouple the physical layout of the data in the relational store from the semantics of the query, providing physical independence. Moreover, ontologies provide richer semantic information, such as inheritance and membership relations, that are lost in a relational schema. By reasoning over the ontologies, our NLQ engine is able to accurately capture the user intent. We study the effectiveness of our approach using three different workloads on top of geographical (GEO), academic (MAS) and financial (FIN) data. ATHENA achieves 100% precision on the GEO and MAS workloads, and 99% precision on the FIN workload which operates on a complex financial ontology. Moreover, ATHENA attains 87.2%, 88.3%, and 88.9% recall on the GEO, MAS, and FIN workloads, respectively.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {1209–1220},
numpages = {12}
}

@article{10.14778/2735461.2735468,
author = {Li, Fei and Jagadish, H. V.},
title = {Constructing an Interactive Natural Language Interface for Relational Databases},
year = {2014},
issue_date = {September 2014},
publisher = {VLDB Endowment},
volume = {8},
number = {1},
issn = {2150-8097},
url = {https://doi.org/10.14778/2735461.2735468},
doi = {10.14778/2735461.2735468},
abstract = {Natural language has been the holy grail of query interface designers, but has generally been considered too hard to work with, except in limited specific circumstances. In this paper, we describe the architecture of an interactive natural language query interface for relational databases. Through a carefully limited interaction with the user, we are able to correctly interpret complex natural language queries, in a generic manner across a range of domains. By these means, a logically complex English language sentence is correctly translated into a SQL query, which may include aggregation, nesting, and various types of joins, among other things, and can be evaluated against an RDBMS. We have constructed a system, NaLIR (Natural Language Interface for Relational databases), embodying these ideas. Our experimental assessment, through user studies, demonstrates that NaLIR is good enough to be usable in practice: even naive users are able to specify quite complex ad-hoc queries.},
journal = {Proc. VLDB Endow.},
month = {sep},
pages = {73–84},
numpages = {12}
}

%CHI refs:

@inproceedings{10.1145/800045.801602,
author = {Ogden, William C. and Brooks, Susan R.},
title = {Query Languages for the Casual User: Exploring the Middle Ground between Formal and Natural Languages},
year = {1983},
isbn = {0897911210},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800045.801602},
doi = {10.1145/800045.801602},
abstract = {In the past the non-programmer who wanted the information contained in a computer database had to employ an expert programmer knowledgeable in the language and structure of the database. Now languages are being developed that are designed to be used by an infrequent or “casual” user who has limited knowledge of how the data is stored or retrieved by the computer. These special purpose query languages which allow these casual users to retrieve information from computer databases are commonly referred to as “nonprocedural” (Leavenworth and Sammet, 1974) because users need only describe the data to be retrieved, not how it is to be retrieved. These languages can be classified into two basic types which are characterized by the level of constraint imposed on the syntax and vocabulary of the language (Ehrenreich, 1981). Formal query languages have a very constrained syntax and vocabulary, while natural query languages have a relatively unconstrained syntax and vocabulary.If we consider the level of constraint that can be imposed on a query language as a continuum, then formal and natural query languages represent the two ends of this continuum. There has been considerable debate over the issue of which end of this continuum best meets the needs of the casual database user (e.g. Hill, 1972; Petrick, 1976; Shneiderman, 1980). Proponents of formal languages contend that these users benefit from learning a constrained language which teaches a concise and unambiguous way of communicating with the computer. Proponents of natural languages, on the other hand, contend that more people would be able to access database information if they could use their own natural languages. Evidence from studies of the use of some of these query languages however, indicate that neither formal, nor natural languages are easy to use. These studies suggest that the casual user will have difficulty operating at either end of the level-of-constraint continuum.},
booktitle = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {161–165},
numpages = {5},
location = {Boston, Massachusetts, USA},
series = {CHI '83}
}

@inproceedings{10.1145/3491102.3501870,
author = {Jiang, Ellen and Toh, Edwin and Molina, Alejandra and Olson, Kristen and Kayacik, Claire and Donsbach, Aaron and Cai, Carrie J and Terry, Michael},
title = {Discovering the Syntax and Strategies of Natural Language Programming with Generative Language Models},
year = {2022},
isbn = {9781450391573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491102.3501870},
doi = {10.1145/3491102.3501870},
abstract = {In this paper, we present a natural language code synthesis tool, GenLine, backed by 1) a large generative language model and 2) a set of task-specific prompts that create or change code. To understand the user experience of natural language code synthesis with these new types of models, we conducted a user study in which participants applied GenLine to two programming tasks. Our results indicate that while natural language code synthesis can sometimes provide a magical experience, participants still faced challenges. In particular, participants felt that they needed to learn the model’s “syntax,” despite their input being natural language. Participants also struggled to form an accurate mental model of the types of requests the model can reliably translate and developed a set of strategies to debug model input. From these findings, we discuss design implications for future natural language code synthesis tools built using large generative language models.},
booktitle = {Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems},
articleno = {386},
numpages = {19},
keywords = {code synthesis, generative language models, prompt programming},
location = {New Orleans, LA, USA},
series = {CHI '22}
}

@inproceedings{10.1145/3491102.3501972,
author = {Setlur, Vidya and Tory, Melanie},
title = {How Do You Converse with an Analytical Chatbot? Revisiting Gricean Maxims for Designing Analytical Conversational Behavior},
year = {2022},
isbn = {9781450391573},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491102.3501972},
doi = {10.1145/3491102.3501972},
abstract = {Chatbots have garnered interest as conversational interfaces for a variety of tasks. While general design guidelines exist for chatbot interfaces, little work explores analytical chatbots that support conversing with data. We explore Gricean Maxims to help inform the basic design of effective conversational interaction. We also draw inspiration from natural language interfaces for data exploration to support ambiguity and intent handling. We ran Wizard of Oz studies with 30 participants to evaluate user expectations for text and voice chatbot design variants. Results identified preferences for intent interpretation and revealed variations in user expectations based on the interface affordances. We subsequently conducted an exploratory analysis of three analytical chatbot systems (text + chart, voice + chart, voice-only) that implement these preferred design variants. Empirical evidence from a second 30-participant study informs implications specific to data-driven conversation such as interpreting intent, data orientation, and establishing trust through appropriate system responses.},
booktitle = {Proceedings of the 2022 CHI Conference on Human Factors in Computing Systems},
articleno = {29},
numpages = {17},
keywords = {repair, visual analysis, intent, refinement., ambiguity, chatbots},
location = {New Orleans, LA, USA},
series = {CHI '22}
}

@inproceedings{10.1145/3411764.3445421,
author = {Kim, Young-Ho and Lee, Bongshin and Srinivasan, Arjun and Choe, Eun Kyoung},
title = {Data@Hand: Fostering Visual Exploration of Personal Data On Smartphones Leveraging Speech and Touch Interaction},
year = {2021},
isbn = {9781450380966},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411764.3445421},
doi = {10.1145/3411764.3445421},
abstract = {Most mobile health apps employ data visualization to help people view their health and activity data, but these apps provide limited support for visual data exploration. Furthermore, despite its huge potential benefits, mobile visualization research in the personal data context is sparse. This work aims to empower people to easily navigate and compare their personal health data on smartphones by enabling flexible time manipulation with speech. We designed and developed Data@Hand, a mobile app that leverages the synergy of two complementary modalities: speech and touch. Through an exploratory study with 13 long-term Fitbit users, we examined how multimodal interaction helps participants explore their own health data. Participants successfully adopted multimodal interaction (i.e., speech and touch) for convenient and fluid data exploration. Based on the quantitative and qualitative findings, we discuss design implications and opportunities with multimodal interaction for better supporting visual data exploration on mobile devices.},
booktitle = {Proceedings of the 2021 CHI Conference on Human Factors in Computing Systems},
articleno = {462},
numpages = {17},
keywords = {smartphone, speech, Personal informatics, data visualization, multimodal interaction},
location = {Yokohama, Japan},
series = {CHI '21}
}


